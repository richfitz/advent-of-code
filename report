#!/usr/bin/env Rscript
main <- function() {
  args <- commandArgs(TRUE)
  if (length(args) == 0) {
    year <- max(dir(pattern = "^20[0-9]{2}$"))
  } else {
    year <- args[[1]]
  }
  report(year)
}

run <- function(year, day) {
  path <- file.path(year, paste0(day, ".R"))
  day_int <- as.integer(sub("d", "", day))
  times <- list()

  env <- new.env(parent = topenv())
  exprs <- parse(file = path)
  inputs <- list()

  with_dir(year, {
    for (e in exprs) {
      t <- system.time(res <- eval(e, env), gcFirst = FALSE)[["elapsed"]]
      if (is_call(e, "<-")) {
        nm <- as.character(e[[2]])
        times[[nm]] <- t
        inputs[[nm]] <- all.vars(e[[3]])
      } else if (is_call(e, "part1")) {
        times$part1 <- t
        inputs$part1 <- all.vars(e)
      } else if (is_call(e, "part2")) {
        times$part2 <- t
        inputs$part2 <- all.vars(e)
      }
    }
  })

  ## Find all dependencies:
  include <- union(inputs$part1, inputs$part2)
  repeat {
    add <- setdiff(unlist(inputs[include]), include)
    if (length(add) == 0) {
      break
    } else {
      include <- union(include, add)
    }
  }
  times$setup <- sum(unlist(times[include]))

  lines <- count_lines(path)

  list(year = year,
       day = day_int,
       setup = times$setup,
       part1 = times$part1,
       part2 = times$part2,
       lines = lines)
}

report <- function(year) {
  days <- sort(sub("\\.R", "", dir(year, "d[0-9]{2}\\.R$")))

  col <- replicate(
    length(days),
    paste0("#", paste(as.raw(sample.int(256, 3, TRUE) - 1), collapse = "")))
  names(col) <- days

  lines <- 0
  time <- 0
  message(sprintf("Report for %s", year))
  message(" Day     Setup    Part1    Part2  Lines")
  for (d in days) {
    message(sprintf("%s: ", crayon::make_style(col[[d]])(d)),
            appendLF = FALSE)
    res <- silently(run(year, d))
    message(sprintf("%s %s %s %s",
                    format_time(res$setup),
                    format_time(res$part1),
                    format_time(res$part2),
                    format_lines(res$lines)))
    lines <- lines + (res$lines %||% 0)
    time <- time + (res$part1 %||% 0) + (res$part2 %||% 0) + (res$setup %||% 0)
  }
  message(sprintf("%s: %s %s %s",
                  crayon::bold("tot"), strrep(" ", 17),
                  format_time(time), format_lines(lines)))
}

format_time <- function(t) {
  if (is.null(t)) {
    crayon::red("   (???)")
  } else {
    crayon::green(format(round(t * 1000), width = 8))
  }
}


format_lines <- function(n) {
  if (is.null(n)) {
    crayon::red(" (---)")
  } else {
    crayon::green(format(n, width = 6))
  }
}

count_lines <- function(path) {
  txt <- readLines(path)
  ignore <- grepl("^\\s*(stopifnot.*|#.*|\\}|)$", txt) |
    grepl("test-input.*\\.txt", txt)
  length(txt) - sum(ignore)
}

silently <- function(expr) {
  suppressMessages(suppressWarnings(capture.output(
    res <- tryCatch(force(expr), error = function(e) NULL))))
  res
}

is_call <- function(e, nm) {
  is.recursive(e) && identical(e[[1]], as.name(nm))
}

`%||%` <- function(a, b) {
  if (is.null(a)) b else a
}

with_dir <- function(path, code) {
  owd <- setwd(path)
  on.exit(setwd(owd))
  force(code)
}

if (!interactive()) {
  main()
}
